/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/auth/google/token': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Google OAuth2 Token Login
     * @description Logs in a user using Google OAuth2 Access Token.
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      /** @description Google OAuth2 Access Token */
      requestBody: {
        content: {
          'application/json': components['schemas']['models.GoogleTokenRequest']
        }
      }
      responses: {
        /** @description Access and refresh tokens */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['models.TokensResponse']
          }
        }
        /** @description Invalid request payload or access token is required */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['models.ErrorResponse']
          }
        }
        /** @description Failed to get user info from Google or error creating/updating user */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['models.ErrorResponse']
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/login': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Login user
     * @description This endpoint logs in a user and returns tokens
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      /** @description Login user */
      requestBody: {
        content: {
          'application/json': components['schemas']['models.LoginRequest']
        }
      }
      responses: {
        /** @description Tokens */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['models.TokensResponse']
          }
        }
        /** @description Invalid input */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
        /** @description Invalid credentials */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/refresh-token': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Refresh JWT tokens
     * @description Refreshes the access and refresh tokens using a valid refresh token.
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      /** @description Refresh token */
      requestBody: {
        content: {
          'application/json': components['schemas']['models.RefreshTokenRequest']
        }
      }
      responses: {
        /** @description access_token" "refresh_token */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
        /** @description error" "Invalid input or Refresh token required */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
        /** @description error" "Unauthorized */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/register': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Register a new user
     * @description This endpoint registers a new user with email, password, and username
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      /** @description Register user */
      requestBody: {
        content: {
          'application/json': components['schemas']['models.User']
        }
      }
      responses: {
        /** @description Tokens */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['models.TokensResponse']
          }
        }
        /** @description Invalid input */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
        /** @description Email already in use */
        409: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/validate-token': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Validate user token
     * @description This endpoint validates a user's JWT token
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Valid token */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
        /** @description Invalid token */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/exercises': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all exercises
     * @description Get a list of all exercises with information on muscle groups in the requested language (English or Russian). Supports filtering by muscle_group_id and searching by name.
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter by muscle group ID */
          muscle_group_id?: number
          /** @description Search by exercise name (both in Russian and English) */
          search?: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description List of exercises */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['models.ExerciseResponse'][]
          }
        }
        /** @description Failed to retrieve exercises */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
      }
    }
    put?: never
    /**
     * Create a new exercise
     * @description Create a new exercise with names in both English and Russian, and specify the muscle group.
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      /** @description Create new exercise */
      requestBody: {
        content: {
          'application/json': components['schemas']['models.CreateExerciseRequest']
        }
      }
      responses: {
        /** @description Created exercise */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['models.Exercise']
          }
        }
        /** @description Invalid input */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
        /** @description Failed to create exercise */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/exercises/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update an existing exercise
     * @description Update an existing exercise with new names in both English and Russian, and update the muscle group.
     */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description Exercise ID */
          id: number
        }
        cookie?: never
      }
      /** @description Update exercise */
      requestBody: {
        content: {
          'application/json': components['schemas']['models.UpdateExerciseRequest']
        }
      }
      responses: {
        /** @description Updated exercise */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['models.Exercise']
          }
        }
        /** @description Invalid input */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
        /** @description Exercise not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
        /** @description Failed to update exercise */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
      }
    }
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/fitness-levels': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all fitness levels
     * @description Получение списка всех уровней физической подготовки с названиями на английском и русском языках.
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description List of fitness levels */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['models.FitnessLevel'][]
          }
        }
        /** @description Failed to retrieve fitness levels */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/muscle-groups': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all muscle groups
     * @description Get a list of all muscle groups in the requested language (English or Russian).
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description List of muscle groups */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['models.GetMuscleGroupsResponse'][]
          }
        }
        /** @description Failed to retrieve muscle groups */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
      }
    }
    put?: never
    /**
     * Create a new muscle group
     * @description Create a new muscle group with names in both English and Russian.
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      /** @description Muscle group data */
      requestBody: {
        content: {
          'application/json': components['schemas']['models.CreateMuscleGroupRequest']
        }
      }
      responses: {
        /** @description Created muscle group */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['models.MuscleGroup']
          }
        }
        /** @description Invalid input */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: unknown
            }
          }
        }
        /** @description Failed to create muscle group */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: unknown
            }
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/muscle-groups/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update a muscle group
     * @description Обновление информации о группе мышц с учетом названий на двух языках.
     */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description Muscle group ID */
          id: string
        }
        cookie?: never
      }
      /** @description Updated muscle group data */
      requestBody: {
        content: {
          'application/json': components['schemas']['models.MuscleGroup']
        }
      }
      responses: {
        /** @description Updated muscle group */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['models.MuscleGroup']
          }
        }
        /** @description Invalid input */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: unknown
            }
          }
        }
        /** @description Muscle group not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: unknown
            }
          }
        }
        /** @description Failed to update muscle group */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: unknown
            }
          }
        }
      }
    }
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/user/profile': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get User Profile
     * @description Retrieves the profile information of the authenticated user, including email, username, fitness level, avatar, and role.
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Returns the user profile data */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['models.GetUserProfileResponse']
          }
        }
        /** @description No token provided or invalid token */
        401: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
        /** @description User not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/workout/add-set/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Add a set to a workout session
     * @description This endpoint allows adding a set (reps and weight) to an ongoing workout session.
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description Workout session ID */
          id: number
        }
        cookie?: never
      }
      /** @description Set data */
      requestBody: {
        content: {
          'application/json': components['schemas']['models.AddSetRequest']
        }
      }
      responses: {
        /** @description Set added successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: unknown
            }
          }
        }
        /** @description Invalid input or session ID */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
        /** @description Workout session not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
        /** @description Failed to add set */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/workout/complete/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Complete a workout session
     * @description Marks a workout session as completed and allows adding a final note.
     */
    put: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description Workout session ID */
          id: number
        }
        cookie?: never
      }
      /** @description Completion note */
      requestBody: {
        content: {
          'application/json': components['schemas']['models.CompleteWorkoutRequest']
        }
      }
      responses: {
        /** @description Workout session completed successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: unknown
            }
          }
        }
        /** @description Invalid input or session ID */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
        /** @description Workout session not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
        /** @description Failed to complete workout session */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
      }
    }
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/workout/exercise/{exercise_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get workout sessions by exercise
     * @description Retrieve paginated workout sessions for a specific exercise for the authenticated user, with support for different languages.
     */
    get: {
      parameters: {
        query?: {
          /** @description Limit the number of results */
          limit?: number
          /** @description Offset for pagination */
          offset?: number
        }
        header?: never
        path: {
          /** @description Exercise ID */
          exercise_id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Paginated list of workout sessions */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['models.PaginatedWorkoutResponse']
          }
        }
        /** @description Invalid exercise ID */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
        /** @description Failed to retrieve workout sessions */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/workout/incomplete': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get incomplete workout sessions
     * @description Retrieve all incomplete workout sessions for the authenticated user, with support for different languages.
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description List of incomplete workouts */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['models.IncompleteWorkoutResponse'][]
          }
        }
        /** @description Failed to retrieve incomplete workouts */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: unknown
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/workout/start': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Start a workout session
     * @description This endpoint starts a workout session for a specific exercise and optionally returns the last completed session if available.
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      /** @description Exercise ID */
      requestBody: {
        content: {
          'application/json': components['schemas']['models.StartWorkoutRequest']
        }
      }
      responses: {
        /** @description New workout session and last session (if any) */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['models.StartWorkoutResponse']
          }
        }
        /** @description Invalid input or Exercise ID missing */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
        /** @description Failed to start workout session */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/workout/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get details of a workout session
     * @description Retrieve details of a specific workout session including sets, exercise info, and muscle group.
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /** @description Workout session ID */
          id: number
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Workout session details */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['models.WorkoutSessionResponse']
          }
        }
        /** @description Invalid session ID */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
        /** @description Workout session not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: string
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    'models.AddSetRequest': {
      /** @example 10 */
      reps?: number
      /** @example 50.5 */
      weight?: number
    }
    'models.CompleteWorkoutRequest': {
      /** @example Great workout! */
      note?: string
    }
    'models.CreateExerciseRequest': {
      /** @example A basic chest exercise. */
      description_eng?: string
      /** @example Базовое упражнение для груди. */
      description_ru?: string
      /** @example https://example.com/benchpress.jpg */
      image_url?: string
      /** @example 1 */
      muscle_group_id: number
      /** @example Bench Press */
      name_eng: string
      /** @example Жим лежа */
      name_ru: string
    }
    'models.CreateMuscleGroupRequest': {
      /** @example http://example.com/chest.jpg */
      image_url?: string
      /** @example Chest */
      name_eng: string
      /** @example Грудь */
      name_ru: string
    }
    'models.ErrorResponse': {
      error?: string
    }
    'models.Exercise': {
      created_at?: string
      description_eng?: string
      description_ru?: string
      id?: number
      image_url?: string
      muscle_group?: components['schemas']['models.MuscleGroup']
      name_eng?: string
      name_ru?: string
    }
    'models.ExerciseResponse': {
      created_at?: string
      description?: string
      id?: number
      muscle_group?: components['schemas']['models.MuscleGroupDTO']
      name?: string
    }
    'models.FitnessLevel': {
      id?: number
      name_eng?: string
      name_ru?: string
    }
    'models.GetMuscleGroupsResponse': {
      id: number
      image_url?: string
      name: string
    }
    'models.GetUserProfileResponse': {
      avatar_url?: string
      bio?: string
      created_at?: string
      email?: string
      fitness_level?: string
      last_login?: string
      role?: string
      username?: string
    }
    'models.GoogleTokenRequest': {
      access_token: string
    }
    'models.IncompleteWorkoutResponse': {
      created_at?: string
      exercise?: components['schemas']['models.Exercise']
      id?: number
      is_completed?: boolean
      note?: string
      sets?: components['schemas']['models.Set'][]
    }
    'models.LoginRequest': {
      email?: string
      password?: string
    }
    'models.MuscleGroup': {
      id?: number
      image_url?: string
      name_eng?: string
      name_ru?: string
    }
    'models.MuscleGroupDTO': {
      id?: number
      name?: string
    }
    'models.PaginatedWorkoutResponse': {
      items?: components['schemas']['models.IncompleteWorkoutResponse'][]
      total?: number
    }
    'models.Permission': {
      id?: number
      name?: string
    }
    'models.Provider': {
      id?: number
      name?: string
      users?: components['schemas']['models.User'][]
    }
    'models.RefreshTokenRequest': {
      refresh_token?: string
    }
    'models.Role': {
      id?: number
      name?: string
      permissions?: components['schemas']['models.Permission'][]
    }
    'models.Set': {
      created_at?: string
      id?: number
      reps?: number
      weight?: number
      workout_session_id?: number
    }
    'models.StartWorkoutRequest': {
      /** @example 1 */
      exercise_id?: number
    }
    'models.StartWorkoutResponse': {
      created_at: string
      is_completed: boolean
      last_session?: components['schemas']['models.WorkoutSessionResponse']
      session_id: number
    }
    'models.TokensResponse': {
      access_token?: string
      refresh_token?: string
    }
    'models.UpdateExerciseRequest': {
      /** @example A basic chest exercise. */
      description_eng?: string
      /** @example Базовое упражнение для груди. */
      description_ru?: string
      /** @example https://example.com/benchpress.jpg */
      image_url?: string
      /** @example 1 */
      muscle_group_id: number
      /** @example Bench Press */
      name_eng: string
      /** @example Жим лежа */
      name_ru: string
    }
    'models.User': {
      avatar_url?: string
      bio?: string
      created_at?: string
      email?: string
      fitness_level?: components['schemas']['models.FitnessLevel']
      fitness_level_id?: number
      id?: string
      last_login?: string
      provider?: components['schemas']['models.Provider']
      provider_id?: number
      provider_user_id?: string
      role?: components['schemas']['models.Role']
      role_id?: number
      username?: string
    }
    'models.WorkoutSessionResponse': {
      created_at?: string
      exercise?: {
        id?: number
        muscle_group?: {
          id?: number
          name?: string
        }
        name?: string
      }
      id?: number
      is_completed?: boolean
      note?: string
      sets?: components['schemas']['models.Set'][]
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export type operations = Record<string, never>
